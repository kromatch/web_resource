@import "mixin";

$cBlack: black;

body {
  text-align: center;
}

.three-dot-spinner {
  & div {
    display: inline-block;
    width: 18px;
    height: 18px;
    background-color: $cBlack;
    border-radius: 50%;
    animation: sk-bouncedelay 1.4s infinite;
    //infiniteは無限繰り返す

    @for $i from 1 through 2 {
      &:nth-child(#{$i}) {
        animation-delay: -0.32s / $i;
      }
    }
  }

  // & .bounce1 {
  //   animation-delay: -0.32s; //マイナスにすると他より早くなる
  // }

  // & .bounce2 {
  //   animation-delay: -0.16s;
  // }
}

.rect {
  display: inline-block;
  width: 100px;
  height: 100px;
  background-color: $cBlack;
  @include animation($name: sk-squaredelay, $direction: alternate-reverse);
  // animation: sk-squaredelay 1.4s;
  // animation-timing-function: ease; //animationを下のように分けて書くこと推奨
  // animation-delay: 2s;
  // animation-iteration-count: infinite;
  // animation-direction: alternate-reverse;
  // // animation-fill-mode: forwards;
}
.paused {
  animation-play-state: paused;
}

@keyframes sk-bouncedelay {
  //sk-bouncedelayがキーフレーム
  0% {
    transform: scale(0);
    background-color: $cBlack;
  }
  40% {
    transform: scale(1);
  }
  80% {
    transform: scale(0);
  }
  100% {
    transform: scale(0);
  }
}

@keyframes sk-squaredelay {
  0% {
    transform: scale(0);
  }
  40% {
    transform: scale(0.3);
  }
  80% {
    transform: scale(0.7);
  }
  100% {
    transform: scale(1);
    background-color: green;
  }
}

#container {
  display: inline-block;
  // width: 100px;
  // height: 200px;
}

/** ここに記述しよう */

.spinner {
  width: 40px;
  height: 40px;
  margin: 100px auto;
  background-color: red;
  @include animation(
    $name: sk-spinner,
    $duration: 1.2s,
    $iteration-count: infinite,
    $timing-function: ease-in-out
  );
}

@keyframes sk-spinner {
  0% {
    transform: perspective(120px) rotateX(0deg) rotateY(0deg);
    // perspectiveは親要素に付与することが基本だが、１要素だけに付与したい時に↑とする
  }
  50% {
    transform: perspective(120px) rotateX(-180deg) rotateY(0deg);
  }
  100% {
    transform: perspective(120px) rotateX(-180deg) rotateY(-180deg);
  }
}

.double-spinner {
  width: 40px;
  height: 40px;
  position: relative;
  margin: 100px auto;
  // background-color: green;

  & > div {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    top: 0;
    left: 0;
    background-color: $cBlack;
    opacity: 0.6;

    @include animation(
      $name: sk-double-spinner,
      $duration: 2s,
      $iteration-count: infinite,
      $timing-function: ease-in-out
    );

    &:nth-child(2) {
      animation-delay: -2s;
    }
  }
}

@keyframes sk-double-spinner {
  0%,
  100% {
    transform: scale(0);
  }
  50% {
    transform: scale(1);
  }
}

.rect-spinner {
  width: 50px;
  height: 40px;
  margin: 100px auto; //縦　横
  // background-color: green;
  text-align: center;
  letter-spacing: -2px;

  & > div {
    background-color: $cBlack;
    display: inline-block;
    width: 6px;
    height: 100%;

    @include animation(
      $name: sk-rect-spinner,
      $duration: 1.2s,
      $iteration-count: infinite,
      $timing-function: ease-in-out
    );

    @for $i from 1 through 5 {
      &:nth-child(#{$i}) {
        animation-delay: -1.3s + $i * 0.1s; //すでに始まっている状態にする
        //0.1くらいの時間幅の方が、小刻みに見えるのでおすすめ
      }
    }
  }



  @keyframes sk-rect-spinner {
    0%,
    40%,
    100% {
      transform: scaleY(0.4);
    }
    20% {
      transform: scaleY(1);
    }
  }
}
