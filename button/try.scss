$cWhite: white;
$cBlack: black;

.try {
  & .btn {
    position: relative;
    display: inline-block;
    background-color: $cWhite;
    border: 1px solid $cBlack;
    font-weight: 600;
    padding: 10px 40px;
    margin: 10px auto;
    cursor: pointer;
    transition: all 0.3s;
    color: $cBlack;
    text-decoration: none !important;

    &.float {
      &:hover {
        background-color: $cBlack;
        color: $cWhite;
        box-shadow: 2px 2px 2px 2px green;
      }
    }
    &.filled {
      background-color: $cBlack;
      color: $cWhite;
      box-shadow: 2px 2px 2px 2px green;

      &:hover {
        background-color: $cWhite;
        color: $cBlack;
        box-shadow: none;
      }
    }
    &.letter-spacing {
      &:hover {
        background-color: $cBlack;
        color: $cWhite;
        letter-spacing: 3px;
      }
    }
    &.shadow {
      &:hover {
        transform: translate(-3px, -3px);
        box-shadow: 2px 2px 2px 2px green;
      }
    }
    &.solid {
      box-shadow: 1px 1px 1px 1px green;
      border-radius: 10px;

      &:hover {
        transform: translate(3px, 3px);
        box-shadow: none;
      }
    }
  }
}

//スライドするボタンを作成する
//コツとしては、hoverした時のアニメーションが完成した時の状態を作成すると良い
#container-second {
  text-align: center;
}
.slide {
  & .btn {
    background-color: $cWhite;
    color: $cBlack;
    border: 1px solid $cBlack;
    font-weight: 600;
    padding: 10px 40px;
    margin: 50px auto;
    cursor: pointer;
    transition: all 0.3s;

    &.slide-bg {
      position: relative; //親要素にrelativeを設定しないと、子要素でposition:absoluteで絶対位置を決められない
      // overflow: hidden; //枠外にはみ出したものはhidden visibleだと見えるようになる
      z-index: 1; //spanより前に出す

      // & span {
      //   display: inline-block;
      //   width: 100%; //windowの100%を指定しているので、親要素にrelativeがないと、ブラウザいっぱいに広がる
      //   height: 100%;
      //   background-color: $cBlack;
      //   position: absolute; //絶対位置で表示にして、top:0とleft:0で左端に位置させる
      //   top: 0;
      //   left: 0;
      //   transform: translateX(-100%);
      //   transition: transform 0.3s;
      //   z-index: -1; //spanがボタンの文字列より前にきているので背面に設定
      // }

      //spanに変わり擬似要素で同様に作成
      &::before {
        //要素の最初に表示される afterは後に表示される。ただしHTML要素には一つのみ適応可能 imgなどの空タグには使えない
        content: ""; //擬似要素生成には、''を入れないと行けない 'あああ'などでもいい
        display: inline-block;
        width: 100%; //windowの100%を指定しているので、親要素にrelativeがないと、ブラウザいっぱいに広がる
        height: 100%;
        background-color: $cBlack;
        position: absolute; //絶対位置で表示にして、top:0とleft:0で左端に位置させる
        top: 0;
        left: 0;
        transform: translateX(-100%);
        transition: transform 1s cubic-bezier(1, -0.04, 0.25, 1); //タイミングファンクション設定
        z-index: -1; //spanがボタンの文字列より前にきているので背面に設定
      }

      &:hover {
        color: $cWhite;
        &::before {
          transform: none;
        }
      }
    }
  }
}

//3dアニメーション　ボタン
#container-third {
  text-align: center;
}
.cover-3d {
  & .btn {
    background-color: $cWhite;
    color: $cBlack;
    border: 1px solid $cBlack;
    font-weight: 600;
    padding: 10px 40px;
    margin: 50px auto;
    cursor: pointer;
    transition: all 0.3s;

    &.anime {
      position: relative;
      overflow: visible;
      z-index: 1;
      transform-style: preserve-3d; //子要素を3dで表現できる　今回はbeforeに対してできる
      perspective: 100px; //奥行を持たせることができる
      // perspective-origin: -60% 50%; //視点の設定　正面デフォルトは50% 50%

      & span {
        display: inline-block;
        transform: translateZ(20px);
      }

      &::before {
        content: "";
        display: inline-block;
        width: 100%;
        height: 100%;
        background-color: $cBlack;
        position: absolute;
        top: 0;
        left: 0;
        transform-origin: top center;
        transform: rotateX(90deg); //前方から降りてくる
        transition: all 3s;
        // z-index: -1; //spanがボタンの文字列より前にきているので背面に設定
        //3d空間にした時は、z-indexは同じ平面に存在する時のみ機能する。
        opacity: 0;
      }
      &:hover {
        color: $cWhite;
        &::before {
          transform: none;
          opacity: 1;
        }
      }
    }
  }
}

//ブロック型のボタン
#container-forth {
  text-align: center;
}
.btn {
  position: relative;
  // border: 10px solid blue; //border範囲確認用
  display: inline-block;
  transform-style: preserve-3d;
  perspective: 300px;
  width: 150px;
  height: 50px;
  margin: 0px auto;
  cursor: pointer;
  transition: all 0.3s;

  &.cubic { //子要素は半角スペースを入れる
    & span {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: 1px solid $cBlack; //borderをつけるとどうなっているかわかりやすい
      line-height: 48px;
      //48pxの理由：親要素が50px　かつ borderが1pxなので、上下で2px　合計が揃う値
      // line-heightは、行間を設定したい時利用。２行以上の時は不自然になるため、使えない。
      text-align: center;
      transition: all 2s;
      transform-origin: center center -25px;
    }

      & .hovering {
        background-color: $cBlack;
        color: $cWhite;
        transform: rotateX(90deg);

      }

      & .default {
        background-color: $cWhite;
        color: $cBlack;
        transform: rotateX(0);

      }
      &:hover {
        & .hovering {
          transform: rotateX(0);
        }
        & .default{
          transform:rotateX(-90deg);
        }
      }
    }
  }

